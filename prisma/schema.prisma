// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  words         Word[]
  phrases       Phrase[]
  sentences     Sentence[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Word {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  german        String?
  meaning       String?
  example       String?
  english       String?
  tags          String[]
  addedAt       DateTime  @default(now())
  nextReview    DateTime?
  reviewHistory Json?
}

model Phrase {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  phrase        String
  translation   String
  usage         String?
  context       String?
  category      String?
  tags          String[]
  addedAt       DateTime  @default(now())
  nextReview    DateTime?
  reviewHistory Json?
}

model Sentence {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  sentence      String
  translation   String
  notes         String?
  source        String?
  tags          String[]
  addedAt       DateTime  @default(now())
  nextReview    DateTime?
  reviewHistory Json?
}

model DailyScore {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  date    DateTime @unique
  correct Int
  total   Int
}

model DailyHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  date       DateTime
  known      Int
  unknown    Int
  score      Int
  flashcards Json     // Save the flashcards for the day
}
